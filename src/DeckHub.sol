// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity 0.8.24;

/// @title Ether Deck Mk2 Registry
/// @author jtriley.eth
/// @notice a reasonably optimized, deployer for Ether Deck Mk2
contract DeckHub {
    /// @notice logged on deck deployment
    /// @param deployer the deployer
    /// @param deck the deck
    event Deployed(address indexed deployer, address indexed deck);

    /// @notice deploys deck
    /// @dev directives:
    ///      01. store initcode in memory (lines 21:54)
    ///      02. store runner in memory
    ///      03. create2 deck with provided salt; cache as deck
    ///      04. if deck is zero, revert
    ///      05. log deck deployment
    ///      06. store deck in memory
    ///      07. return deck
    /// @dev only decks deployed by this factory may deploy and register other decks
    /// @param runner the new deck's runner
    /// @return deck the new deck
    function deploy(address runner, bytes32 salt) external returns (address) {
        assembly {
            mstore(0x0000, 0x6080601f61042138819003918201601f19168301916001600160401b03831184)
            mstore(0x0020, 0x8410176100605780849260209460405283398101031261005c57516001600160)
            mstore(0x0040, 0xa01b038116810361005c576001556040516103ac90816100758239f35b5f80fd)
            mstore(0x0060, 0x5b634e487b7160e01b5f52604160045260245ffdfe6080604052600436101561)
            mstore(0x0080, 0x0015575b3661035257005b5f3560e01c80637a8ca61514610074578063a3d6bd)
            mstore(0x00a0, 0xe91461006f578063b0e45f281461006a578063c08eaf2814610065578063d363)
            mstore(0x00c0, 0x22cd146100605763fba34ed10361000e57610312565b610251565b610204565b)
            mstore(0x00e0, 0x610156565b6100b4565b3461009a575f36600319011261009a57600154600160)
            mstore(0x0100, 0x0160a01b03166080908152602090f35b5f80fd5b600435906001600160a01b03)
            mstore(0x0120, 0x8216820361009a57565b604036600319011261009a576100c861009e565b6024)
            mstore(0x0140, 0x35906001600160401b039081831161009a573660238401121561009a57826004)
            mstore(0x0160, 0x013591821161009a57366024838501011161009a57815f809392819360246001)
            mstore(0x0180, 0x5433149701833734905af1163d5f803e610122573d5ffd5b3d5ff35b9181601f)
            mstore(0x01a0, 0x8401121561009a578235916001600160401b03831161009a5760208085019484)
            mstore(0x01c0, 0x60051b01011161009a57565b60408060031936011261009a576001600160401b)
            mstore(0x01e0, 0x039060043582811161009a57610184903690600401610126565b919092602435)
            mstore(0x0200, 0x90811161009a5761019f903690600401610126565b6001949194543314908414)
            mstore(0x0220, 0x161561009a5760059290921b8201915b8281036101c357005b8035843590805f)
            mstore(0x0240, 0x5281845f20555f805160206103808339815191525f80a3602093840193016101)
            mstore(0x0260, 0xba565b600435906001600160e01b03198216820361009a57565b604036600319)
            mstore(0x0280, 0x011261009a576102186101ed565b602435906001600160a01b03821682036100)
            mstore(0x02a0, 0x9a57600154330361009a57805f528160405f20555f8051602061038083398151)
            mstore(0x02c0, 0x91525f80a3005b606036600319011261009a576001600160401b036004358181)
            mstore(0x02e0, 0x1161009a5761027d903690600401610126565b919060243582811161009a5761)
            mstore(0x0300, 0x0297903690600401610126565b909260443590811161009a576102b490929192)
            mstore(0x0320, 0x3690600401610126565b919094600154331482959487938360051b0194831492)
            mstore(0x0340, 0x141616945b8285036102e157856102df575f80fd5b005b909192939482358201)
            mstore(0x0360, 0x9081359182915f806020958695869586018337818b358d355af1169701950193)
            mstore(0x0380, 0x9201906102cf565b3461009a57602036600319011261009a576001600160e01b)
            mstore(0x03a0, 0x03196103346101ed565b165f525f602052602060018060a01b0360405f205416)
            mstore(0x03c0, 0x604051908152f35b63ffffffff60e01b5f35165f5260405f2054365f80375f80)
            mstore(0x03e0, 0x3681845af4901515163d5f803e610122573d5ffdfe2c0b629fc2b386c229783b)
            mstore(0x0400, 0x88b245e8730c1397b78e4dd4a43cd7aafdf1b39f12a164736f6c634300081800)
            mstore(0x0420, 0x0a00000000000000000000000000000000000000000000000000000000000000)

            mstore(0x0421, runner)

            let deck := create2(0x00, 0x00, 0x0441, salt)

            if iszero(deck) { revert(0x00, 0x00) }

            log3(0x00, 0x00, 0x09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec20, caller(), deck)

            mstore(0x00, deck)

            return(0x00, 0x20)
        }
    }
}
